classdef capex
    % CAPEX Library for all CAPEX-related equations
    
    %% PROPERTIES
    properties
        ...
    end

    %% CONSTANT PROPERTIES
    properties (Constant)
        
        % CEPCI Index for 20yy (annual)
        % To access, e.g. capex.CEPCI(2019)
        % Source: https://www.chemengonline.com/pci-home
        CEPCI = containers.Map([2001, 2016, 2018, 2019], [394.3, 542.0, 603.1, 607.5])
        
        % USD to SGD forex rate for 20yy (annualised average)
        % To access, e.g. capex.USSG(2019)
        % Source: https://www.ofx.com/en-gb/forex-news/historical-exchange-rates/yearly-average-rates/
        USSG = containers.Map([2001, 2016, 2018, 2019], [1.791202, 1.381242, 1.349338, 1.364062])
        
        % Consumer price index for 20yy (annual)
        % To access, e.g. CPI('SG')(2019)
        % Source: Wolfram|Alpha Knowledgebase, U.S. Bureau of Labor Statistics, Monetary Authority of Singapore
        CPI = containers.Map(['SG', 'US'], ...
            [containers.Map([2001, 2010, 2016, 2018, 2019], [86.05, 100.0, 112.6, 113.8, 115.0]), ...
            containers.Map([1983, 2001, 2016, 2018, 2019], [100.0, 176.7, 240.0, 251.2, 257.0])])        
        
        % Equipment cost correlation parameters
        % An array of [K1, K2, K3, Amin, Amax, n]
        % where [K1, K2, K3] = cost correlation params, [Amin, Amax] = min/max capacity (range of validity), n = cost exponent
        % To access, e.g. double(eqptcostlib{'pump'}{'centrifugal'})
        % Sources:
        % T - Analysis, Synthesis, and Design of Chemical Processes, 5th Ed. by Turton et al.
        % P - Table 9-50, Chemical Engineers’ Handbook, 7th. Ed by Perry et al.
        % R - Process Equipment Cost Estimating by Ratio and Proportion by Randall, 2012
        % M - Plant Design and Economics for Chemical Engineering (Part 2) by Timmerhaus
        % D - default exponent of 0.6, in the absence of other information
        % A - default exponent of 1.0 for trays, as intuitively expected by tray material weight being proportional to area
        eqptcostlib = py.dict(pyargs( ...
            'compressor', py.dict(pyargs( ...
                'centrifugal', [2.2897, 1.3604, -0.1027, 450., 3000., 0.67], ... % R
                'axial', [2.2897, 1.3604, -0.1027, 450., 3000., 0.67], ... % R
                'reciprocating', [2.2897, 1.3604, -0.1027, 450., 3000., 0.84], ... % P
                'rotary', [5.0355, -1.8002, 0.8253, 18., 950., 0.6] ... % D
            )), ...
            'pump', py.dict(pyargs( ...
                'reciprocating', [3.8696, 0.3161, 0.1220, .1, 200., 0.6], ... % D
                'positivedisp', [3.4771, 0.1350, 0.1438, 1., 100., 0.6], ... % D
                'centrifugal', [3.3892, 0.0536, 0.1538, 1., 300., 0.67] ... % R
            )), ...
            'heatexc', py.dict(pyargs( ...
                'fixedtube', [4.3247, -0.3030, 0.1634, 10., 1000., 0.62], ... % R. However, H specifies n=0.67
                'utube', [4.1884, -0.2503, 0.1974, 10., 1000., 0.53], ... % R
                'kettle', [4.4646, -0.5277, 0.3955, 10., 1000., 0.48], ... % P
                'doublepipe', [3.3444, 0.2745, -0.0472, 1., 10., 0.59], ... % P
                'multipipe', [2.7652, 0.7282,0.0783, 10., 100., 0.59] ... % P
            )), ...
            'vessel', py.dict(pyargs( ...
                'horizontal', [3.5565, 0.3776, 0.0905, 0.1, 628., 0.6], ... % D. However, P specifies n=0.57-0.62, and R 0.5
                'vertical', [3.4974, 0.4485, 0.1074, 0.3, 520., 0.6] ... % D. However, P specifies n=0.3, and H 0.62 for towers
            )), ...
            'trays', py.dict(pyargs( ...
                'sieve', [2.9949, 0.4465, 0.3961, 0.7, 12.3, 0.86], ... % M
                'valve', [3.3322, 0.4838, 0.3434, 0.7, 10.5, 1.0], ... % A
                'demister', [3.2353, 0.4838, 0.3434, 0.7, 10.5, 1.0] ... % A
            )), ...
            'mixer', py.dict(pyargs( ...
                'impeller', [3.8511, 0.7009, -0.0003, 5., 150., 0.6], ... % D
                'propeller', [4.3207, 0.0359, 0.1346, 5., 500., 0.5], ... % R
                'turbine', [3.4092, 0.4896, 0.0030, 5., 150., 0.3] ... % R
            )) ...
        ))
    
        % Equipment pressure factor correlation parameters
        % An array of [C1, C2, C3, Pmin, Pmax]
        % where [C1, C2, C3] = pressure factor correlation params, [Pmin, Pmax] = min/max pressure (range of validity)
        % To access, e.g. double(pressurefaclib{'pump'}{'centrifugal'})
        % Source: Analysis, Synthesis, and Design of Chemical Processes, 5th Ed. by Turton et al.
        pressurefaclib = py.dict(pyargs( ...
            'compressor', py.dict(pyargs( ...
                'centrifugal', [0., 0., 0., -Inf, Inf], ...
                'axial', [0., 0., 0., -Inf, Inf], ...
                'reciprocating', [0., 0., 0., -Inf, Inf], ...
                'rotary', [0., 0., 0., -Inf, Inf] ...
            )), ...
            'pump', py.dict(pyargs( ...
                'reciprocating', [-0.245382, 0.259016, -0.01363, 10., 100.], ...
                'positivedisp', [-0.245382, 0.259016, -0.01363, 10., 100.], ...
                'centrifugal', [-0.3935, 0.3957, -0.00226, 10., 100.] ...
            )), ...
            'heatexc', py.dict(pyargs( ...
                'fixedtube', [0.03881, -0.11272, 0.08183, 5., 140.], ...
                'utube', [0.03881, -0.11272, 0.08183, 5., 140.], ...
                'kettle', [0.03881, -0.11272, 0.08183, 5., 140.], ...
                'doublepipe', [0.6072, -0.9120, 0.3327, 40., 100.], ...
                'multipipe', [0.6072, -0.9120, 0.3327, 40., 100.] ...
            )), ...  # use the pressure factor equation for vessels instead
            'trays', py.dict(pyargs( ...
                'sieve', [0., 0., 0., -Inf, Inf], ...
                'valve', [0., 0., 0., -Inf, Inf], ...
                'demister', [0., 0., 0., -Inf, Inf] ...
            )), ...
            'mixer', py.dict(pyargs( ...
                'impeller', [0., 0., 0., -Inf, Inf], ...
                'propeller', [0., 0., 0., -Inf, Inf], ...
                'turbine', [0., 0., 0., -Inf, Inf] ...
            )) ...
        ))
    
    
        % Equipment material factors
        % To access, e.g. double(matfaclib{'pump'}{'centrifugal'}{'SS'})
        % Source: Analysis, Synthesis, and Design of Chemical Processes, 5th Ed. by Turton et al.
        matfaclib = py.dict(pyargs( ...
            'compressor', py.dict(pyargs( ...
                'centrifugal', py.dict(pyargs( ...
                    'CS', 2.8, ... % CS = carbon steel
                    'SS', 5.8 / 2.8, ... % SS = stainless steel
                    'Ni', 11.5 / 2.8 ... % Ni = nickel alloy
                )), ...
                'axial', py.dict(pyargs( ...
                    'CS', 3.8, ...
                    'SS', 8.0 / 3.8, ...
                    'Ni', 15.9 / 3.8 ...
                )), ...
                'reciprocating', py.dict(pyargs( ...
                    'CS', 3.4, ...
                    'SS', 7.0 / 3.4, ...
                    'Ni', 13.9 / 3.4 ...
                )), ...
                'rotary', py.dict(pyargs( ...
                    'CS', 2.4, ...
                    'SS', 5.0 / 2.4, ...
                    'Ni', 9.9 / 2.4 ...
                )) ...
            )), ...
            'pump', py.dict(pyargs( ...
                'reciprocating', py.dict(pyargs( ...
                    'Fe', 1.0, ... % Fe = cast iron
                    'CS', 1.5, ...
                    'SS', 2.4, ...
                    'Ni', 4.0, ...
                    'Ti', 6.5 ... % Ti = titanium alloy
                )), ...
                'positivedisp', py.dict(pyargs( ...
                    'Fe', 1.0, ...
                    'CS', 1.4, ...
                    'SS', 2.7, ...
                    'Ni', 4.7, ...
                    'Ti', 10.7 ...
                )), ...
                'centrifugal', py.dict(pyargs( ...
                    'Fe', 1.0, ...
                    'CS', 1.6, ...
                    'SS', 2.3, ...
                    'Ni', 4.4 ...
                )) ...
            )), ...
            'heatexc', py.dict(pyargs( ...
                'fixedtube', py.dict(pyargs( ...
                    'CS/CS', 1.0, ...
                    'CS/SS', 1.8, ...
                    'SS/CS', 1.8, ... % duplicate
                    'SS/SS', 2.9, ...
                    'CS/Ni', 2.8, ...
                    'Ni/CS', 2.8, ... % duplicate
                    'Ni/Ni', 3.8, ...
                    'CS/Ti', 4.6, ...
                    'Ti/CS', 4.6, ... % duplicate
                    'Ti/Ti', 11.4 ...
                )), ...
            'utube', py.dict(pyargs( ...
                    'CS/CS', 1.0, ...
                    'CS/SS', 1.8, ...
                    'SS/CS', 1.8, ... % duplicate
                    'SS/SS', 2.9, ...
                    'CS/Ni', 2.8, ...
                    'Ni/CS', 2.8, ... % duplicate
                    'Ni/Ni', 3.8, ...
                    'CS/Ti', 4.6, ...
                    'Ti/CS', 4.6, ... % duplicate
                    'Ti/Ti', 11.4 ...
                )), ...
            'kettle', py.dict(pyargs( ...
                    'CS/CS', 1.0, ...
                    'CS/SS', 1.8, ...
                    'SS/CS', 1.8, ... % duplicate
                    'SS/SS', 2.9, ...
                    'CS/Ni', 2.8, ...
                    'Ni/CS', 2.8, ... % duplicate
                    'Ni/Ni', 3.8, ...
                    'CS/Ti', 4.6, ...
                    'Ti/CS', 4.6, ... % duplicate
                    'Ti/Ti', 11.4 ...
                )), ...
            'doublepipe', py.dict(pyargs( ...
                    'CS/CS', 1.0, ...
                    'CS/SS', 1.8, ...
                    'SS/CS', 1.8, ... % duplicate
                    'SS/SS', 2.9, ...
                    'CS/Ni', 2.8, ...
                    'Ni/CS', 2.8, ... % duplicate
                    'Ni/Ni', 3.8, ...
                    'CS/Ti', 4.6, ...
                    'Ti/CS', 4.6, ... % duplicate
                    'Ti/Ti', 11.4 ...
                )), ...
            'multipipe', py.dict(pyargs( ...
                    'CS/CS', 1.0, ...
                    'CS/SS', 1.8, ...
                    'SS/CS', 1.8, ... % duplicate
                    'SS/SS', 2.9, ...
                    'CS/Ni', 2.8, ...
                    'Ni/CS', 2.8, ... % duplicate
                    'Ni/Ni', 3.8, ...
                    'CS/Ti', 4.6, ...
                    'Ti/CS', 4.6, ... % duplicate
                    'Ti/Ti', 11.4 ...
                )) ...
            )), ...
            'vessel', py.dict(pyargs( ...
                'horizontal', py.dict(pyargs( ...
                    'CS', 1.0, ...
                    'SS', 3.1, ...
                    'Ni', 7.1, ...
                    'Ti', 9.4 ...
                )), ...
                'vertical', py.dict(pyargs( ...
                    'CS', 1.0, ...
                    'SS', 3.1, ...
                    'Ni', 7.1, ...
                    'Ti', 9.4 ...
                )) ...
            )), ...
            'trays', py.dict(pyargs( ...
                'sieve', py.dict(pyargs( ...
                    'CS', 1.0, ...
                    'SS', 1.8, ...
                    'Ni', 5.6 ...
                )), ...
                'valve', py.dict(pyargs( ...
                    'CS', 1.0, ...
                    'SS', 1.8, ...
                    'Ni', 5.6 ...
                )), ...
                'demister', py.dict(pyargs( ...
                    'SS', 1.0, ...
                    'FC', 1.8, ... % FC = fluorocarbon
                    'Ni', 5.6 ...
                )) ...
            )) ...
        )) ...
    
        % Equipment bare module correlation parameters
        % An array of [B1, B2] = bare module correlation params
        % To access, e.g. double(baremodlib{'pump'}{'centrifugal'})
        % Source: Analysis, Synthesis, and Design of Chemical Processes, 5th Ed. by Turton et al.
        baremodlib = py.dict(pyargs( ...
            'compressor', py.dict(pyargs( ... % FBM = (B2 for CS] ... * FM = (B2 for CS] ... * (B2 for material / B2 for CS] ...
                'centrifugal', [0., 2.8], ...
                'axial', [0., 3.8], ...
                'reciprocating', [0., 3.4], ...
                'rotary', [0., 2.4] ...
            )), ...
            'pump', py.dict(pyargs( ... % FBM = B1 + B2 * FM * FP
                'reciprocating', [1.89, 1.35], ...
                'positivedisp', [1.89, 1.35], ...
                'centrifugal', [1.89, 1.35] ...
            )), ...
            'heatexc', py.dict(pyargs( ... % FBM = B1 + B2 * FM * FP
                'fixedtube', [1.63, 1.66], ...
                'utube', [1.63, 1.66], ...
                'kettle', [1.63, 1.66], ...
                'doublepipe', [1.74, 1.55], ...
                'multipipe', [1.74, 1.55] ...
            )), ...
            'vessel', py.dict(pyargs( ... % FBM = B1 + B2 * FM * FP
                'horizontal', [1.49, 1.52], ...
                'vertical', [2.25, 1.82] ...
            )), ...
            'trays', py.dict(pyargs( ... % FBM = FM for trays, B1 = 0. Assuming tray quantity factor Fq = 1.
                'sieve', [0., 1.], ...
                'valve', [0., 1.], ...
                'demister', [0., 1.] ...
            )), ...
            'mixer', py.dict(pyargs( ... % FBM = 1.38 (constant], ... B2 = 0
                'impeller', [1.38, 0.], ...
                'propeller', [1.38, 0.], ...
                'turbine', [1.38, 0.] ...
            )) ...
        )) ...
          
    end
    
    %% METHODS
    methods
        ...
    end

    %% STATIC METHODS
    methods (Static)
        function Cpo = eqptpurcost(A,K1,K2,K3)
            % EQPTPURCOST Calculate equipment purchased cost (Cp^o)
            %   Cp = EQPTPURCOST(A,K1,K2,K3) calculates equipment purchased
            %   cost at ambient pressure and using carbon steel as MOC,
            %   where:
            %   - A = equipment capacity (various units)
            %   - K1, K2, K3 = cost correlation factors
            %
            %   Returns:
            %   - Cpo = equipment purchased cost ($)
            
            Cpo = 10 .^ (K1 + K2.*log10(A) + K3.*(log10(A)).^2);
        end
        
        function FP = pressurefacves(D,ts,P)
            % PRESSUREFACVES Calculate pressure factor (F_P) for vessels
            %   CBM = PRESSUREFACVES(D,P) calculates bare module factor for
            %   vessels at specified elevated pressure and MOC,
            %   where:
            %   - D = vessel diameter (m)
            %   - ts = vessel thickness (in)
            %   - P = pressure (barg)
            %
            %   Returns:
            %   - FP = amplification factor for pressure
            if P < -0.5
                FP = 1.25;
            elseif P > -0.5 && ts < dsg.tmin
                FP = 1;
            else
                FP = max(((P+1)*D / (2*(850-0.6*(P+1))) + 0.00315) / 0.0063, 1);
            end
        end
        
        function FP = pressurefacanc(P,C1,C2,C3)
            % PRESSUREFACANC Calculate pressure factor (F_P) for anciliary equipment (e.g. pumps and exchangers)
            %   CBM = PRESSUREFACANC(P,C1,C2,C3) calculates bare module factor
            %   for anciliary equipment (e.g. pumps and exchangers) at
            %   specified elevated pressure and MOC, where:
            %   - P = pressure (barg)
            %   - C1, C2, C3 = pressure correlation factors
            %
            %   Returns:
            %   - FP = amplification factor for pressure
            
            FP = capex.eqptpurcost(P,C1,C2,C3);
            % borrowing quadratic-exponential relation
        end
        
        function FBM = baremodfac(B1,B2,FM,FP)
            % BAREMODFAC Calculate bare module factor (F_BM)
            %   CBM = BAREMODFAC(B1,B2,FM,FP) calculates
            %   bare module factor at specified elevated pressure and MOC, where:
            %   - B1, B2 = bare module correlation factors
            %   - FM = amplification factor for material of construction
            %   (MOC)
            %   - FP = amplification factor for pressure
            %
            %   Returns:
            %   - FBM = bare module factor (dimensionless)
            
            FBM = B1 + B2.*FM.*FP;
        end
        
        function CBM = baremodcost(Cpo, FBM)
            % BAREMODCOST Calculate bare module cost (C_BM)
            %   CBM = BAREMODCOST(Cpo, FBM) calculates
            %   bare module cost at specified elevated pressure and MOC,
            %   where:
            %   - Cpo = equipment purchased cost ($)
            %   - FBM = bare module factor (dimensionless)
            %
            %   Returns:
            %   - CBM = bare module cost ($)
            
            CBM = FBM .* Cpo;
        end
        
        function CTM = totmodcost(CBM)
            % TOTMODCOST Calculate total module cost (C_TM)
            %   CBM = TOTMODCOST(Cpo, FBM) calculates
            %   total module cost at specified elevated pressure and MOC,
            %   where:
            %   - CBM = bare module cost ($)
            %
            %   Returns:
            %   - CTM = total module cost ($)
            
            CTM = 1.18 .* CBM;
        end
        
        function CGR = grasscost(CTM,Cpo)
            % GRASSCOST Calculate grassroots cost (CGR)
            %   CGR = GRASSCOST(CTM,Cpo) calculates grasscosts cost
            %   at specified elevated pressure and MOC,
            %   where:
            %   - CTM = total module cost ($)
            %   - Cpo = purchased equipment cost at ambient pressure and
            %   carbon steel MOC ($)
            %
            %   Returns:
            %   - CGR = grassroots cost ($)
            
            CGR = CTM + 0.5 .* Cpo;
        end
    end
end